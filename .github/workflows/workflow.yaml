name: Terragrunt Deployment

on:
  push:
    branches:
      - develop
      - release
  pull_request:
    branches:
      - main

env:
  tf_version: '1.10.5'
  tg_version: '0.67.0'
  working_dir: 'project'
  aws_region: 'us-east-1'
  aws_caller_identity: '707809188586'
  
jobs:
  # checks:
  #   name: Basic Checks
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: 'Checkout'
  #       uses: actions/checkout@main

  #     - name: Check terragrunt HCL
  #       uses: gruntwork-io/terragrunt-action@v2
  #       with:
  #         tf_version: ${{ env.tf_version }}
  #         tg_version: ${{ env.tg_version }}
  #         tg_dir: 'live/dev'
  #         tg_command: 'hclfmt'

  develop:
    name: Develop Phase (Basic Tests)
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    env:
      tg_dir: 'live/dev'
      environment: 'dev'

    permissions:
      id-token: write
      contents: read
    steps:
      - name: 'Checkout'
        uses: actions/checkout@main    

      - name: Check terragrunt HCL
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ env.tf_version }}
          tg_version: ${{ env.tg_version }}
          tg_dir: ${{ env.tg_dir }}
          tg_command: 'run-all validate'

      - name: Assume Role for Dev
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::707809188586:role/dst-${{ env.environment }}-github-infrastructure-role
          aws-region: ${{ env.aws_region }}

      - name: Plan
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ env.tf_version }}
          tg_version: ${{ env.tg_version }}
          tg_dir: ${{ env.tg_dir }}
          tg_command: 'run-all plan --terragrunt-exclude-dir=alb'

      - name: Deploy to dev
        if: contains(github.event.head_commit.message, '[deploy]')      
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ env.tf_version }}
          tg_version: ${{ env.tg_version }}
          tg_dir: ${{ env.tg_dir }}
          tg_command: 'run-all apply --terragrunt-exclude-dir=alb'

      - name: Run Basic Tests
        run: |
          echo "Running basic tests for development..."
          # Add your test commands here

  # staging:
  #   name: Staging Phase (Deploy & Additional Tests)
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/release'
  #   permissions:
  #     id-token: write
  #     contents: read
  #   steps:
  #     <<: *common-steps

  #     - name: Assume Role for Staging
  #       uses: aws-actions/configure-aws-credentials@v2
  #       with:
  #         role-to-assume: arn:aws:iam::707809188586:role/dst-stage-github-infrastructure-role
  #         aws-region: us-east-1

  #     - name: Determine Deployment Directory
  #       id: set-dir
  #       run: |
  #         ENV_DIR="live/stage"
  #         echo "Deployment environment: $ENV_DIR"
  #         echo "env_dir=$ENV_DIR" >> $GITHUB_OUTPUT

  #     - name: Terragrunt Init & Plan (Recursive)
  #       working-directory: ${{ steps.set-dir.outputs.env_dir }}
  #       run: |
  #         terragrunt run-all init -reconfigure --terragrunt-non-interactive --terragrunt-exclude-dir=alb
  #         terragrunt run-all plan --terragrunt-non-interactive --terragrunt-exclude-dir=alb

  #     - name: Terragrunt Apply (Staging)
  #       working-directory: ${{ steps.set-dir.outputs.env_dir }}
  #       run: |
  #         terragrunt run-all apply -auto-approve --terragrunt-non-interactive --terragrunt-exclude-dir=alb

  #     - name: Run Additional Staging Tests
  #       run: |
  #         echo "Running additional tests on staging..."
  #         # Add your staging test commands here

  # production:
  #   name: Production Phase (Deploy on PR)
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'pull_request'
  #   permissions:
  #     id-token: write
  #     contents: read
  #   steps:
  #     <<: *common-steps

  #     - name: Assume Role for Prod
  #       uses: aws-actions/configure-aws-credentials@v2
  #       with:
  #         role-to-assume: arn:aws:iam::707809188586:role/dst-prod-github-infrastructure-role
  #         aws-region: us-east-1

  #     - name: Determine Deployment Directory
  #       id: set-dir
  #       run: |
  #         ENV_DIR="live/prod"
  #         echo "Deployment environment: $ENV_DIR"
  #         echo "env_dir=$ENV_DIR" >> $GITHUB_OUTPUT

  #     - name: Terragrunt Init & Plan (Recursive)
  #       working-directory: ${{ steps.set-dir.outputs.env_dir }}
  #       run: |
  #         terragrunt run-all init -reconfigure --terragrunt-non-interactive --terragrunt-exclude-dir=alb
  #         terragrunt run-all plan --terragrunt-non-interactive --terragrunt-exclude-dir=alb

  #     - name: Terragrunt Apply (Production)
  #       working-directory: ${{ steps.set-dir.outputs.env_dir }}
  #       run: |
  #         terragrunt run-all apply -auto-approve --terragrunt-non-interactive --terragrunt-exclude-dir=alb
