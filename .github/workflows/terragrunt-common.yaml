name: Terragrunt Common Steps

permissions:
  id-token: write
  contents: read

on:
  workflow_call:
    inputs:
      tg_dir:
        required: true
        type: string
      environment:
        required: true
        type: string
      aws_region:
        required: true
        type: string
      aws_caller_identity:
        required: true
        type: string
      tf_version:
        required: true
        type: string
      tg_version:
        required: true
        type: string
      deploy:
        required: false
        type: boolean
        default: false

jobs:
  terragrunt:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials via IAM Role
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ inputs.aws_caller_identity }}:role/dst-${{ inputs.environment }}-github-infrastructure-role
          aws-region: ${{ inputs.aws_region }}

      # - name: Reconfigure Terragrunt Backends
      #   uses: gruntwork-io/terragrunt-action@v2
      #   with:
      #     tf_version: ${{ inputs.tf_version }}
      #     tg_version: ${{ inputs.tg_version }}
      #     tg_dir: ${{ inputs.tg_dir }}
      #     tg_command: 'run-all init -reconfigure --queue-exclude-dir'

      # - name: Refresh remote state
      #   uses: gruntwork-io/terragrunt-action@v2
      #   with:
      #     tf_version: ${{ inputs.tf_version }}
      #     tg_version: ${{ inputs.tg_version }}
      #     tg_dir: ${{ inputs.tg_dir }}
      #     tg_command: 'run-all refresh --queue-exclude-dir'

      # - name: Validate Terragrunt HCL Files
      #   uses: gruntwork-io/terragrunt-action@v2
      #   with:
      #     tf_version: ${{ inputs.tf_version }}
      #     tg_version: ${{ inputs.tg_version }}
      #     tg_dir: ${{ inputs.tg_dir }}
      #     tg_command: 'run-all validate --queue-exclude-dir'

      - name: Generate Terraform Plan
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ inputs.tf_version }}
          tg_version: ${{ inputs.tg_version }}
          tg_dir: ${{ inputs.tg_dir }}
          tg_command: 'run-all plan --queue-exclude-dir'

      - name: Deploy Functional Environment
        if: ${{ inputs.deploy }}
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ inputs.tf_version }}
          tg_version: ${{ inputs.tg_version }}
          tg_dir: ${{ inputs.tg_dir }}
          tg_command: 'run-all apply'

      - name: Execute Basic Cluster Functionality Tests
        if: ${{ inputs.deploy }}
        run: |
          aws eks update-kubeconfig --region ${{ inputs.aws_region }} --name dst-${{ inputs.environment }}-cluster
          
          echo ">> Checking node status..."
          NOT_READY=$(kubectl get nodes --no-headers | awk '$2 != "Ready"{print $1}' | wc -l)
          if [ "$NOT_READY" -gt 0 ]; then
            echo "Error: One or more nodes are not Ready. Failing the workflow."
            exit 1
          else
            echo "All nodes are Ready."
          fi

          echo ">> Checking essential pods in kube-system namespace..."
          NOT_RUNNING=$(kubectl get pods -n kube-system --no-headers | awk '$3 != "Running"{print $1}' | wc -l)
          if [ "$NOT_RUNNING" -gt 0 ]; then
            echo "Error: One or more essential pods in kube-system are not Running. Failing the workflow."
            exit 1
          else
            echo "All essential pods in kube-system are Running."
          fi
